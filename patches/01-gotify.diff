diff -u -r -N a/alertmanager/asset/assets_vfsdata.go b/alertmanager/asset/assets_vfsdata.go
--- a/alertmanager/asset/assets_vfsdata.go	2024-08-19 10:07:14.238576808 -0700
+++ b/alertmanager/asset/assets_vfsdata.go	2024-08-19 18:32:52.931590772 -0700
@@ -163,9 +163,9 @@
 		"/templates/default.tmpl": &vfsgen۰CompressedFileInfo{
 			name:             "default.tmpl",
 			modTime:          time.Date(1970, 1, 1, 0, 0, 1, 0, time.UTC),
-			uncompressedSize: 5951,
+			uncompressedSize: 6354,
 
-			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x58\x4f\x6f\xbb\x46\x10\xbd\xf3\x29\x56\xce\x25\x3e\x98\xf4\x1c\x29\xaa\xa2\xaa\xed\x25\xaa\x2a\x47\xee\xa5\xaa\xd0\x1a\xc6\x64\xe3\xfd\x43\x76\x07\x27\x16\xe6\xbb\x57\x0b\xc4\x06\x2f\x38\x8b\xe3\xdf\xe9\xe7\x5b\xd8\xcc\xbc\x99\x7d\x6f\x98\x19\x5c\x14\x24\x81\x15\x93\x40\x26\x51\x44\x39\x68\x14\x54\xd2\x14\xf4\x84\x94\xe5\x63\xeb\xb9\x28\x08\xc8\x84\x94\x65\x30\xe8\xb2\x98\x3f\x59\xaf\xa2\x20\xe1\xef\x1f\x08\x5a\x52\xbe\x98\x3f\x91\xb2\xbc\xbb\xb9\xab\xec\xcc\xaf\x1a\x62\x60\x1b\xd0\x0f\xd6\x68\xde\x3c\x90\x1d\xc9\x35\x7f\xcb\x41\x6f\x6b\xf7\x26\x50\x37\x92\xc9\x97\xaf\x10\xa3\x8d\xf0\xaf\xf5\x7e\x46\x8a\xb9\x21\x3b\x82\x6a\x91\x65\xa0\x6b\x57\xb6\x22\xf0\xb6\xff\xe7\x64\xc5\x34\x93\xa9\xf5\xb9\xb7\x3e\xd5\x85\x4c\xf8\x47\x75\x4a\x76\x84\x83\x6c\x47\xfc\x8f\x58\xa3\x3f\xb5\xca\xb3\x27\xba\x04\x6e\xc2\x67\xa5\x11\x92\xbf\x29\xd3\x26\xfc\x87\xf2\x1c\x6c\xc0\x57\xc5\x24\x99\x10\x8b\x4a\xea\x90\x29\x92\x5b\x8b\x15\xfe\xa6\x84\x50\xb2\x76\x9e\x36\x67\x2d\xbc\x29\x29\xcb\xdb\xa2\x20\xef\x0c\x5f\xba\xc6\xe1\x1c\x84\xda\x40\x37\xfa\x5f\x54\x80\x69\x18\xed\x8b\xbe\x4f\x7c\xba\xff\x6b\x40\xa6\x04\x4c\xac\x59\x86\x4c\xc9\xc9\x09\x8e\x11\x3e\xb0\x96\x34\xe2\xcc\x60\x63\xaa\xa9\x4c\x81\x84\xa4\x2c\xeb\xbc\xee\x83\xc3\xa1\xcb\x93\x65\x65\x56\x11\x69\xd3\xb7\x4f\x0f\x64\x7f\x81\x26\xb1\x3a\xf8\xa3\x94\x0a\xa9\xcd\xa9\x03\xd9\x3a\x3e\x0f\xf7\x59\xe5\x3a\x86\xfb\x5a\x4c\x90\xa0\x29\x2a\x5d\x57\x62\xd0\x43\xd4\x49\x0a\x22\x41\xf5\x3a\x51\xef\xd2\xe1\x22\xf0\x25\xc3\x33\xeb\x60\x3c\x1d\xbe\xc8\x5e\x84\x04\xfd\x8c\x18\x4e\xe3\x75\x98\xc0\x8a\xe6\x1c\x43\x64\xc8\xa1\xa1\x02\x41\x64\x9c\x62\xf7\xe5\x0c\x87\x6a\xb0\x8b\x93\x1b\xdb\x1e\x44\x1f\x54\xb7\x09\x79\xe2\xad\x28\xe7\x4b\x1a\xaf\x1d\xbc\xde\xf4\x2d\x28\xd9\x91\xaf\x0c\x39\x93\x6b\xef\x0c\xe2\x26\x03\x96\x4c\xfc\x1c\x32\x0d\xb6\xd6\x3c\xad\x5b\x09\x9d\x64\xac\xea\xc1\x9e\x29\xb3\x58\x49\x10\xea\x95\x4d\xfc\xed\x73\xcd\x7d\x33\xf6\xbf\xdc\x4a\x29\xac\x27\x4e\xab\x06\xdb\xe6\x99\xbd\x5a\x92\xe3\x76\xef\xe2\x36\xb4\x71\xe5\xe8\x22\xc6\x9c\x81\xc4\xf3\x0b\x72\x08\xf1\x30\x15\xcf\xd3\xcc\xc5\x65\xd2\x20\x95\x31\x98\x1e\x5c\xa7\x83\x87\xc3\xac\xaa\xcc\xa4\x20\x19\xec\x81\x05\x18\x43\xd3\xf3\xde\x6f\x07\xcc\x55\xa8\x19\x78\x03\x0d\xad\x77\xc2\x05\x47\xf3\xb5\x33\xc0\xa7\xe4\x17\x32\xb3\x8d\xb3\x3a\x24\xf5\x61\xd5\x3a\x4f\x33\xd2\xdd\x02\xaa\x20\xb3\xd6\x8d\x7a\xe2\xcd\xc1\x28\xbe\x81\xe4\x28\xe2\xe7\xb1\x7f\xcc\x4f\x0f\x27\xea\xcc\x87\x52\x53\xf5\xf1\xf1\xd5\xd4\x51\xfd\x1d\xe2\x17\x8a\x63\x35\x0f\xae\xfa\x9d\xd0\xaf\xbd\x28\x2f\x34\x77\xf0\x7a\xf5\x19\x50\xfd\x48\x1f\x54\x91\x1d\x96\x83\x9d\xd4\x35\xcf\xa8\xc6\xed\x08\x7b\xa4\xa9\xaf\x35\x4d\x41\x62\x74\x3c\xe2\xba\xf5\xb5\x61\x31\x2a\xad\x32\x73\x28\x5b\xa4\x08\x51\xb7\xd0\xae\xb5\x34\xae\x17\xb8\xac\x82\x44\x86\xdb\x28\x61\x26\xe3\x74\x1b\x0d\x6c\x53\x5f\x37\x6e\x17\x59\x28\xc9\x50\x59\x42\x22\x54\x8a\x8f\x1c\x89\x9d\xd9\x95\x9b\x17\xb5\x01\x7d\x81\xfd\xd1\x81\xfa\xf1\xf5\x74\x99\x72\xf2\xaf\xa6\xcb\x15\x93\xbb\xd2\x9f\x62\xf2\xb0\xd3\x8d\x99\x29\xed\x6d\x4e\xb6\x5e\xf6\xc3\x67\xfa\xf8\x6f\x84\x16\xce\x55\xde\x31\xf2\xb6\x59\x44\xe0\x90\x6a\x2a\xfa\xa8\xfc\x69\x49\x49\x98\x89\x95\x4e\x2e\xd0\x88\x8e\x91\xae\xec\xda\x35\x61\x09\x1f\xd7\x57\xf7\xdb\x3c\x0a\x83\x40\x45\xbb\x99\x0a\x41\xf5\xf6\xac\x3a\x3d\xc6\x3a\xbf\xe2\x1d\xa4\xe6\xcb\xde\x47\xa6\x1b\x32\x4a\xa8\xd6\xcf\x6d\xdf\x56\x6c\x1f\xda\x57\xb3\x9e\xe0\x5f\x89\xf7\x7f\x00\x00\x00\xff\xff\xf6\x0e\x88\xb1\x3f\x17\x00\x00"),
+			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x58\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x10\xde\xcb\xfa\x60\x6d\xcf\x01\x16\xc5\xa2\x68\x7b\x09\x8a\xc2\x81\x7b\x29\x0a\x81\x96\xc6\x0a\x63\x7e\x28\xe4\xc8\x89\x21\xeb\xbf\x17\x94\x14\x5b\x12\x25\x87\x72\x9c\x4b\xeb\x5b\xc4\xcc\xbc\x19\xbe\x37\x9c\x21\x5d\x14\x24\x81\x0d\x93\x40\x66\x51\x44\x39\x68\x14\x54\xd2\x14\xf4\x8c\x94\xe5\x8f\xd6\x77\x51\x10\x90\x09\x29\xcb\x60\xd4\x65\xb5\xbc\xb7\x5e\x45\x41\xc2\x5f\x5f\x11\xb4\xa4\x7c\xb5\xbc\x27\x65\xf9\xed\xcb\xb7\xca\xce\xfc\xac\x21\x06\xb6\x03\xfd\xdd\x1a\x2d\x9b\x0f\x72\x20\xb9\xe6\xcf\x39\xe8\x7d\xed\xde\x04\xea\x46\x32\xf9\xfa\x09\x62\xb4\x11\xfe\xb6\xde\x0f\x48\x31\x37\xe4\x40\x50\xad\xb2\x0c\x74\xed\xca\x36\x04\x9e\x8f\xff\x9c\x6d\x98\x66\x32\xb5\x3e\x77\xd6\xa7\xda\x90\x09\x7f\xab\x56\xc9\x81\x70\x90\xed\x88\xff\x10\x6b\xf4\xbb\x56\x79\x76\x4f\xd7\xc0\x4d\xf8\xa0\x34\x42\xf2\x27\x65\xda\x84\x7f\x51\x9e\x83\x0d\xf8\xa4\x98\x24\x33\x62\x51\x49\x1d\x32\x45\xf2\xd5\x62\x85\xbf\x28\x21\x94\xac\x9d\xe7\xcd\x5a\x0b\x6f\x4e\xca\xf2\x6b\x51\x90\x17\x86\x8f\x5d\xe3\x70\x09\x42\xed\xa0\x1b\xfd\x0f\x2a\xc0\x34\x8c\x0e\x45\x3f\x26\x3e\x3f\xfe\x35\x22\x53\x02\x26\xd6\x2c\x43\xa6\xe4\xec\x0c\xc7\x08\xaf\x58\x4b\x1a\x71\x66\xb0\x31\xd5\x54\xa6\x40\x42\x52\x96\x75\x5e\x77\xc1\x69\xd1\xe5\xc9\xb2\xb2\xa8\x88\xb4\xe9\xdb\xaf\xef\xe4\xb8\x81\x26\xb1\x3a\xf8\x0f\x29\x15\x52\x9b\x53\x07\xb2\xb5\x7c\x19\xee\x83\xca\x75\x0c\x77\xb5\x98\x20\x41\x53\x54\xba\xae\xc4\x60\x80\xa8\xb3\x14\x44\x82\xea\x6d\xa2\x5e\xa4\xc3\x45\xe0\x4b\x86\x67\xd6\xc1\x74\x3a\x7c\x91\xbd\x08\x09\x86\x19\x49\x15\xb2\xcd\x3e\x4c\x60\x43\x73\x8e\x21\x32\xe4\xd0\x70\x81\x20\x32\x4e\xb1\x7b\x3a\xc3\xb1\x22\xec\x01\x09\x30\x86\xa6\x15\x94\xb5\x6a\x0e\xc3\xc8\x66\x07\xab\x3f\xe8\x9d\xbd\xce\xe1\x9e\x93\x9f\x2a\x4e\xab\x35\x52\xaf\x55\xac\xb6\x93\x76\xca\xbd\xd7\x20\xfa\xf4\x0c\x44\x5b\x82\x51\x7c\x07\x49\x37\xde\xdb\xaa\x7f\xc4\x37\x0f\x1f\x49\x0c\xa7\xf1\xf6\x0a\x8a\x74\x71\x72\x63\x3b\xb6\x18\x82\xea\xce\x05\x4f\xbc\x0d\xe5\x7c\x4d\xe3\xad\x83\x37\x98\xbe\x05\x25\x07\xf2\x9e\x21\x67\x72\xeb\x9d\x41\xdc\x64\xc0\x92\x99\x9f\x43\xa6\xc1\x0a\xe4\x69\xdd\x4a\xe8\x2c\x63\xd5\x58\xf4\x4c\x99\xc5\x4a\x82\x50\x4f\x6c\xe6\x6f\x9f\x6b\xee\x9b\xb1\xff\xe6\x36\x4a\x61\x7d\x09\x68\xd5\x60\xdb\x3c\xb3\x5b\x4b\x72\x3c\x9d\x68\x77\xc6\x4c\x2b\x47\x17\x31\xe6\x0c\x24\x5e\x5e\x90\x63\x88\xa7\x8b\xca\x65\x9a\xb9\xb8\x4c\x1a\xa4\x32\x06\x33\x80\xeb\x9e\xf9\x71\x56\x55\x66\x52\x90\x0c\x86\xda\xe4\x64\x42\x1d\x30\x57\xa1\xcf\x68\xbb\x8b\xeb\xf4\xdd\x85\x7f\xe3\x5d\x5c\xaf\xf3\xb6\xa2\x2e\x7c\x28\x35\xd5\x68\x9d\x5e\x4d\x1d\xd5\x5f\x20\x7e\xa4\x38\x55\xf3\xe0\xa6\xdf\x19\xfd\xda\x6f\x97\x95\xe6\x0e\xde\xa0\x3e\x23\xaa\xf7\xf4\x41\x15\xd9\x61\x39\xda\x49\x5d\xf3\x8c\x6a\xdc\x4f\xb0\x47\x9a\xfa\x5a\xd3\x14\x24\x46\xfd\x11\xd7\xad\xaf\x1d\x8b\x51\x69\x95\x99\x53\xd9\x22\x45\x88\xba\x85\x76\xab\xa5\x69\xbd\xc0\x65\x15\x24\x32\xdc\x47\x09\x33\x19\xa7\xfb\x68\xe4\x36\xf5\x7e\xe3\x76\x91\x85\x92\x0c\x95\x25\x24\x42\xa5\xf8\xc4\x91\xd8\x99\x5d\xb9\x79\x54\x3b\xd0\x57\xb8\x3f\x3a\x50\x9f\x5f\x4f\xff\xa5\x2b\xfd\x39\x26\x4f\x77\xba\x29\x33\xa5\x7d\x9b\x93\xad\xc3\x7e\xfa\xe5\x64\xfa\x1b\xa1\x85\x73\x93\xf7\xd2\x17\x1b\x02\x87\x54\x53\x31\xf6\xfa\xfd\x5f\x92\x92\x30\x13\x2b\x9d\x5c\xa1\x11\xf5\x91\x6e\xec\xda\x6b\xc2\x1a\x5e\x6f\x47\xf7\xc3\x3c\x0a\x83\x40\x45\xbb\x99\x0a\x41\xf5\xfe\xa2\x3a\xed\x63\x5d\x5e\xf1\x0e\x52\xf3\xb2\xf7\x91\xe9\x0b\x99\x24\x54\xeb\x17\xd0\x0f\x2b\x76\x0c\xed\xab\xd9\x40\xf0\xf7\xc4\xfb\x37\x00\x00\xff\xff\xb5\x2f\xdb\xdd\xd2\x18\x00\x00"),
 		},
 		"/templates/email.tmpl": &vfsgen۰CompressedFileInfo{
 			name:             "email.tmpl",
diff -u -r -N a/alertmanager/config/config.go b/alertmanager/config/config.go
--- a/alertmanager/config/config.go	2024-08-19 10:07:14.246577034 -0700
+++ b/alertmanager/config/config.go	2024-08-18 23:28:19.531183271 -0700
@@ -231,6 +231,9 @@
 		for _, cfg := range receiver.PushoverConfigs {
 			cfg.HTTPConfig.SetDirectory(baseDir)
 		}
+		for _, cfg := range receiver.GotifyConfigs {
+			cfg.HTTPConfig.SetDirectory(baseDir)
+		}
 		for _, cfg := range receiver.SlackConfigs {
 			cfg.HTTPConfig.SetDirectory(baseDir)
 		}
@@ -398,6 +401,26 @@
 				*ec.RequireTLS = c.Global.SMTPRequireTLS
 			}
 		}
+		for _, gc := range rcv.GotifyConfigs {
+			if gc.HTTPConfig == nil {
+				gc.HTTPConfig = c.Global.HTTPConfig
+			}
+			if gc.GotifyServerURL == nil {
+				if c.Global.GotifyServerURL == nil {
+					return fmt.Errorf("no Gotify server URL provided")
+				}
+				gc.GotifyServerURL = c.Global.GotifyServerURL
+			}
+			if gc.GotifyAppToken == "" {
+				if c.Global.GotifyAppToken == "" {
+					return fmt.Errorf("no Gotify app token provided")
+				}
+				gc.GotifyAppToken = c.Global.GotifyAppToken
+			}
+			if gc.Priority == 0 {
+				gc.Priority = c.Global.GotifyPriority
+			}
+		}
 		for _, sc := range rcv.SlackConfigs {
 			if sc.HTTPConfig == nil {
 				sc.HTTPConfig = c.Global.HTTPConfig
@@ -751,6 +774,9 @@
 	SMTPAuthSecret       Secret     `yaml:"smtp_auth_secret,omitempty" json:"smtp_auth_secret,omitempty"`
 	SMTPAuthIdentity     string     `yaml:"smtp_auth_identity,omitempty" json:"smtp_auth_identity,omitempty"`
 	SMTPRequireTLS       bool       `yaml:"smtp_require_tls" json:"smtp_require_tls,omitempty"`
+	GotifyServerURL      *URL       `yaml:"gotify_server_url,omitempty" json:"gotify_api_url,omitempty"`
+	GotifyAppToken       Secret     `yaml:"gotify_app_token,omitempty" json:"gotify_app_token,omitempty"`
+	GotifyPriority       uint32     `yaml:"gotify_priority" json:"gotify_priority,omitempty"`
 	SlackAPIURL          *SecretURL `yaml:"slack_api_url,omitempty" json:"slack_api_url,omitempty"`
 	SlackAPIURLFile      string     `yaml:"slack_api_url_file,omitempty" json:"slack_api_url_file,omitempty"`
 	PagerdutyURL         *URL       `yaml:"pagerduty_url,omitempty" json:"pagerduty_url,omitempty"`
@@ -899,6 +925,7 @@
 	DiscordConfigs   []*DiscordConfig   `yaml:"discord_configs,omitempty" json:"discord_configs,omitempty"`
 	EmailConfigs     []*EmailConfig     `yaml:"email_configs,omitempty" json:"email_configs,omitempty"`
 	PagerdutyConfigs []*PagerdutyConfig `yaml:"pagerduty_configs,omitempty" json:"pagerduty_configs,omitempty"`
+	GotifyConfigs    []*GotifyConfig    `yaml:"gotify_configs,omitempty" json:"gotify_configs,omitempty"`
 	SlackConfigs     []*SlackConfig     `yaml:"slack_configs,omitempty" json:"slack_configs,omitempty"`
 	WebhookConfigs   []*WebhookConfig   `yaml:"webhook_configs,omitempty" json:"webhook_configs,omitempty"`
 	OpsGenieConfigs  []*OpsGenieConfig  `yaml:"opsgenie_configs,omitempty" json:"opsgenie_configs,omitempty"`
diff -u -r -N a/alertmanager/config/notifiers.go b/alertmanager/config/notifiers.go
--- a/alertmanager/config/notifiers.go	2024-08-19 10:07:14.246577034 -0700
+++ b/alertmanager/config/notifiers.go	2024-08-18 23:27:34.689958839 -0700
@@ -80,6 +80,16 @@
 		ClientURL:   `{{ template "pagerduty.default.clientURL" . }}`,
 	}
 
+	// DefaultGotifyConfig defines default values for Gotify configurations.
+	DefaultGotifyConfig = GotifyConfig{
+		NotifierConfig: NotifierConfig{
+			VSendResolved: true,
+		},
+		Title:       `{{ template "gotify.default.title" . }}`,
+		Message:     `{{ template "gotify.default.message" . }}`,
+		Priority:    5,
+	}
+
 	// DefaultSlackConfig defines default values for Slack configurations.
 	DefaultSlackConfig = SlackConfig{
 		NotifierConfig: NotifierConfig{
@@ -355,6 +365,30 @@
 	return nil
 }
 
+// GotifyConfig configures notifications via Gotify.
+type GotifyConfig struct {
+	NotifierConfig `yaml:",inline" json:",inline"`
+
+	HTTPConfig      *commoncfg.HTTPClientConfig `yaml:"http_config,omitempty" json:"http_config,omitempty"`
+	GotifyServerURL *URL                        `yaml:"gotify_server_url,omitempty" json:"gotify_server_url,omitempty"`
+	GotifyAppToken  Secret                      `yaml:"gotify_app_token,omitempty" json:"gotify_app_token,omitempty"`
+
+	Title    string `yaml:"title,omitempty" json:"title,omitempty"`
+	Message  string `yaml:"message,omitempty" json:"message,omitempty"`
+	Priority uint32 `yaml:priority,omitempty" json:"priority,omitempty"`
+}
+
+// UnmarshalYAML implements the yaml.Unmarshaler interface.
+func (c *GotifyConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {
+	*c = DefaultGotifyConfig
+	type plain GotifyConfig
+	if err := unmarshal((*plain)(c)); err != nil {
+		return err
+	}
+
+	return nil
+}
+
 // SlackAction configures a single Slack action that is sent with each notification.
 // See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons
 // for more information.
diff -u -r -N a/alertmanager/config/receiver/receiver.go b/alertmanager/config/receiver/receiver.go
--- a/alertmanager/config/receiver/receiver.go	2024-08-19 10:07:14.246577034 -0700
+++ b/alertmanager/config/receiver/receiver.go	2024-08-18 19:16:45.835965491 -0700
@@ -22,6 +22,7 @@
 	"github.com/prometheus/alertmanager/notify"
 	"github.com/prometheus/alertmanager/notify/discord"
 	"github.com/prometheus/alertmanager/notify/email"
+	"github.com/prometheus/alertmanager/notify/gotify"
 	"github.com/prometheus/alertmanager/notify/msteams"
 	"github.com/prometheus/alertmanager/notify/opsgenie"
 	"github.com/prometheus/alertmanager/notify/pagerduty"
@@ -68,6 +69,9 @@
 	for i, c := range nc.WechatConfigs {
 		add("wechat", i, c, func(l log.Logger) (notify.Notifier, error) { return wechat.New(c, tmpl, l, httpOpts...) })
 	}
+	for i, c := range nc.GotifyConfigs {
+		add("gotify", i, c, func(l log.Logger) (notify.Notifier, error) { return gotify.New(c, tmpl, l, httpOpts...) })
+	}
 	for i, c := range nc.SlackConfigs {
 		add("slack", i, c, func(l log.Logger) (notify.Notifier, error) { return slack.New(c, tmpl, l, httpOpts...) })
 	}
diff -u -r -N a/alertmanager/notify/gotify/gotify.go b/alertmanager/notify/gotify/gotify.go
--- a/alertmanager/notify/gotify/gotify.go	1969-12-31 16:00:00.000000000 -0800
+++ b/alertmanager/notify/gotify/gotify.go	2024-08-19 18:31:37.413669864 -0700
@@ -0,0 +1,158 @@
+// Copyright 2019 Prometheus Team
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package gotify
+
+import (
+	"bytes"
+	"context"
+	"encoding/json"
+	"fmt"
+	"io"
+	"net/http"
+
+	"github.com/go-kit/log"
+	"github.com/go-kit/log/level"
+	commoncfg "github.com/prometheus/common/config"
+
+	"github.com/prometheus/alertmanager/config"
+	"github.com/prometheus/alertmanager/notify"
+	"github.com/prometheus/alertmanager/template"
+	"github.com/prometheus/alertmanager/types"
+)
+
+const (
+	maxTitleLenRunes = 256
+	maxMessageLenRunes = 65536
+)
+
+// Notifier implements a Notifier for Gotify notifications.
+type Notifier struct {
+	conf    *config.GotifyConfig
+	tmpl    *template.Template
+	logger  log.Logger
+	client  *http.Client
+	retrier *notify.Retrier
+	gotifyServerURL *config.URL
+	gotifyAppToken config.Secret
+}
+
+// New returns a new Gotify notification handler.
+func New(c *config.GotifyConfig, t *template.Template, l log.Logger, httpOpts ...commoncfg.HTTPClientOption) (*Notifier, error) {
+	client, err := commoncfg.NewClientFromConfig(*c.HTTPConfig, "gotify", httpOpts...)
+	if err != nil {
+		return nil, err
+	}
+
+	return &Notifier{
+		conf:         c,
+		tmpl:         t,
+		logger:       l,
+		client:       client,
+		retrier:      &notify.Retrier{},
+		gotifyServerURL: c.GotifyServerURL,
+		gotifyAppToken: c.GotifyAppToken,
+	}, nil
+}
+
+// request is the request for sending a slack notification.
+type request struct {
+	Title     string       `json:"title,omitempty"`
+	Message   string       `json:"message,omitempty"`
+	Priority  uint32       `json:"priority,omitempty"`
+	Extras    GotifyExtras `json:"extras,omitempty"`
+}
+
+type GotifyExtras struct {
+	ClientDisplay GotifyClientDisplay     `json:"client::display,omitempty"`
+}
+
+type GotifyClientDisplay struct {
+	ContentType string     `json:"contentType,omitempty"`
+}
+
+// Notify implements the Notifier interface.
+func (n *Notifier) Notify(ctx context.Context, as ...*types.Alert) (bool, error) {
+	key, err := notify.ExtractGroupKey(ctx)
+	if err != nil {
+		return false, err
+	}
+
+	level.Debug(n.logger).Log("incident", key)
+
+	data := notify.GetTemplateData(ctx, n.tmpl, as, n.logger)
+	tmpl := notify.TmplText(n.tmpl, data, &err)
+	if err != nil {
+		return false, err
+	}
+
+	title, truncated := notify.TruncateInRunes(tmpl(n.conf.Title), maxTitleLenRunes)
+	if err != nil {
+		return false, err
+	}
+	if truncated {
+		level.Warn(n.logger).Log("msg", "Truncated title", "key", key, "max_runes", maxTitleLenRunes)
+	}
+	message, truncated := notify.TruncateInRunes(tmpl(n.conf.Message), maxMessageLenRunes)
+	if err != nil {
+		return false, err
+	}
+	if truncated {
+		level.Warn(n.logger).Log("msg", "Truncated message", "key", key, "max_runes", maxMessageLenRunes)
+	}
+
+	var url string
+	if n.conf.GotifyServerURL != nil {
+		url = fmt.Sprintf("%s/message?token=%s", n.conf.GotifyServerURL.String(), n.conf.GotifyAppToken)
+	} else {
+		return false, fmt.Errorf("Gotify server URL is nil")
+	}
+
+	r := request{
+		Title:       title,
+		Message:	 message,
+		Priority:    n.conf.Priority,
+		Extras: GotifyExtras{
+			ClientDisplay: GotifyClientDisplay{
+				ContentType: "text/markdown",
+			},
+		},
+	}
+
+	var payload bytes.Buffer
+	if err = json.NewEncoder(&payload).Encode(r); err != nil {
+		return false, err
+	}
+
+	resp, err := postJSONToGotify(ctx, n.client, url, n.conf.GotifyAppToken, &payload)
+	if err != nil {
+		return true, notify.RedactURL(err)
+	}
+
+	shouldRetry, err := n.retrier.Check(resp.StatusCode, resp.Body)
+	if err != nil {
+		return shouldRetry, err
+	}
+	return false, nil
+}
+
+func postJSONToGotify(ctx context.Context, client *http.Client, url string, token config.Secret, body io.Reader) (*http.Response, error) {
+	req, err := http.NewRequest(http.MethodPost, url, body)
+	if err != nil {
+		return nil, err
+	}
+	req.Header.Set("User-Agent", notify.UserAgentHeader)
+	req.Header.Set("Content-Type", "application/json")
+	req.Header.Set("X-Gotify-Key", string(token))
+	return client.Do(req.WithContext(ctx))
+}
diff -u -r -N a/alertmanager/notify/notify.go b/alertmanager/notify/notify.go
--- a/alertmanager/notify/notify.go	2024-08-19 10:07:14.258577372 -0700
+++ b/alertmanager/notify/notify.go	2024-08-18 16:04:38.750805818 -0700
@@ -341,6 +341,7 @@
 		"pagerduty",
 		"wechat",
 		"pushover",
+		"gotify",
 		"slack",
 		"opsgenie",
 		"webhook",
diff -u -r -N a/alertmanager/template/default.tmpl b/alertmanager/template/default.tmpl
--- a/alertmanager/template/default.tmpl	2024-08-19 10:07:14.262577485 -0700
+++ b/alertmanager/template/default.tmpl	2024-08-18 22:54:03.554528986 -0700
@@ -22,6 +22,19 @@
 {{ end }}
 {{ end }}
 
+{{ define "gotify.default.title" }}{{ template "__subject" . }}{{ end }}
+{{ define "gotify.default.message" }}
+{{ .CommonAnnotations.SortedPairs.Values | join " " }}
+{{ if gt (len .Alerts.Firing) 0 }}
+Alerts Firing:
+{{ template "__text_alert_list" .Alerts.Firing }}
+{{ end }}
+{{ if gt (len .Alerts.Resolved) 0 }}
+Alerts Resolved:
+{{ template "__text_alert_list" .Alerts.Resolved }}
+{{ end }}
+{{ end }}
+
 {{ define "slack.default.title" }}{{ template "__subject" . }}{{ end }}
 {{ define "slack.default.username" }}{{ template "__alertmanager" . }}{{ end }}
 {{ define "slack.default.fallback" }}{{ template "slack.default.title" . }} | {{ template "slack.default.titlelink" . }}{{ end }}
